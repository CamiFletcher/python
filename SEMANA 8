# -*- coding: utf-8 -*-
"""Copia de Ejercicios_matplotlib.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16BzMaqU1DzHk2pXTDtuPXldxagHoDmIa

# Práctica Matplotlib

En el presente archivo se pondrán en práctica los conocimiento para visualizar datos de manera correcta. Por ese motivo, se verán líneas de código completas y otras para completar en función de lo que el estudiante desea analizar. Es decir, las figuras se dejan a modo de ejemplo y de referencia para resolver los ejercicios, pero no tienen que ser exactamente igual a la de los alumnos.

Primero, se importan las librerías que se usarán:
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

"""## Ejercicio de tipo de gráficos

Para realizar este ejercicio, debemos importar la información del PBI per cápita de los distintos países, a lo largo de un período que abarca desde 1952 y 2007.
"""

# Importo la información
url = "https://raw.githubusercontent.com/plotly/datasets/master/gapminder_with_codes.csv"
data = pd.read_csv(url)

# Modificar el tipo de dato:
data['year'] = data['year'].astype("int")

data.head()

data.info()

"""**Ejercicio 1:**

Elije un año en el que desees ver la relación entre la expectativa de vida de los habitantes (columna `lifeExp`) y el PBI per cápita de los habitantes (columna gdpPercap)
"""

# Modifica este valor
# =========== Código de alumno ===============
year = 1962
# ============================================

data_year = data[datva["year"] == year]
data_year.head()

"""Realiza un gráfico de puntos que muestre la relación entre la expectativa de vida (columna `lifeExp`) y el PBI per cápita de los habitantes (columna gdpPercap).

El gráfico debe tener:
- Título apropiado
- Nombre y unidades de los ejes cartesianos
- Marcador de tipo triangular y color "#23A763"
- Grilla
"""

fig, ax = plt.subplots()
# =========== Código de alumno ===============
x = data_year.loc[:, ["lifeExp"]]
y =  data_year.loc[:,["gdpPercap"]]
ax.scatter(x, y, marker="^", color="#23A763")
ax.set_title("Poblacion")
ax.set_xlabel("Espectativa de vida")
ax.set_ylabel("PBI per capital")
ax.grid()
# ============================================

plt.show()

"""**Ejercicio 2:**

Creamos un nuevo DataFrame con la información de la Argentina únicamente
"""

data_arg = data[data["country"] == "Argentina"]
data_arg.head()

"""Realiza un gráfico de línea que muestre el PBI per cápita de los habitantes de Argentina (columna gdpPercap) a lo largo del tiempo:

El gráfico debe tener:
- Título apropiado
- Nombre y unidades de los ejes cartesianos
- Linea sólida, espesor 2.2 y color "#30BFDE"
- Grilla
"""

fig, ax = plt.subplots()

# =========== Código de alumno ===============
x = data_arg.loc[:,["gdpPercap"]]
y =  data_arg.loc[:,["year"]]
ax.plot(y, x, linestyle="-", color="#30BFDE", linewidth="2.2")
ax.set_title("PBI Argentina")
ax.set_xlabel("Año")
ax.set_ylabel("PBI")
ax.grid()

# ============================================
plt.show()

"""**Ejercicio 3:**

A continuación verá todos los países de los que poseemos información. Elije uno que no sea nuestro país y luego, crea un nuevo DataFrame.
"""

data["country"].unique()

# =========== Código de alumno ===============
country = "Germany"
# ============================================

data_country = data[data["country"] == country]
data_country.head()

"""Realiza un gráfico de línea que muestre el PBI per cápita de los habitantes de Argentina (columna gdpPercap) a lo largo del tiempo y del país escogido anteriormente:

El gráfico debe tener:
- Título apropiado
- Nombre y unidades de los ejes cartesianos
- Linea sólida, espesor 2.2 y color "#30BFDE" para la curva de nuestro país.
- Linea sólida, espesor 2.2 y color "#1E92E3" para la curva del nuevo país.
- Referencias
- Grilla
"""

fig, ax = plt.subplots()

# =========== Código de alumno ===============
x = data_arg.loc[:,["gdpPercap"]]
y =  data_arg.loc[:,["year"]]
ax.plot(y, x, label="Argentina", linestyle="-", color="#30BFDE", linewidth="2.2")
ax.set_xlabel("Año")
ax.set_ylabel("PBI")
ax.grid()

ax.set_title("Grafico de paises")

x = data_country.loc[:,["gdpPercap"]]
y =  data_country.loc[:,["year"]]
ax.plot(y, x, label="Alemania", linestyle="-", color="#1E92E3", linewidth="2.2")
ax.legend()
ax.grid()


# ============================================

plt.show()

"""**Ejercicio 4:**

A continuación vamos a agrupar PBI per capita por continente.
"""



data_continent = data[['continent', 'gdpPercap']]
data_continent = data_continent.groupby(['continent']).agg('sum')
data_continent

"""Realiza un gráfico de torta la proporción del PBI per cápita de los habitantes de cada continente (columna gdpPercap).

El gráfico debe tener:
- Título apropiado
- Cada parte con el nombre del continente y el porcentaje redondeado a las décimas.
- El color de cada parte será:
  - América: "#30BFDE"
  - Asia: "#E31E4B"
  - África: "#E36F1E"
  - Oceanía: "#1EE39B"
  - Europa: "#1E92E3"
"""

fig, ax = plt.subplots()

# =========== Código de alumno ===============
pbi = data_continent.loc[:,['gdpPercap']]
continente = ["Africa", "Americas", "Asia", "Europe", "Oceania"]
colores = ["#E36F1E", "#30BFDE", "#E31E4B", "#1E92E3", "#1EE39B"]
ax.pie(pbi, labels=continente, autopct="%1.1f%%", colors=colores)
ax.set_title("PBI segun continente")

# ============================================
plt.show()

"""**Ejercicio 5:**

Elije un continente el cual te gustaría analizar con más detalle:
"""

# =========== Código de alumno ===============
continent = "Africa"
# ============================================

data_one_continent = data[data["continent"] == continent]
data_one_continent = data_one_continent[['country', 'gdpPercap']]
data_one_continent = data_one_continent.groupby(['country']).agg('sum')
data_one_continent = data_one_continent.sort_values(by=['gdpPercap'])
data_one_continent[['gdpPercap']]

"""Realiza un gráfico de barras horizontales que muestre el PBI per cápita de los habitantes del continente escogido (columna gdpPercap).

El gráfico debe tener:
- Título apropiado
- Nombre y unidades de los ejes cartesianos en caso de ser necesario
- Nombre de los paises al lado de cada barra
- Grilla con líneas verticales únicamente, color "#CDD7DA" y línea discontinua.
"""

fig, ax = plt.subplots()
# =========== Código de alumno ===============
pbi = data_one_continent.loc[:,['gdpPercap']]
pais = data_one_continent.loc[:,['country']]
ax.barh(pais, pbi)
ax.set_title("Pbi por Pais en Africa")
ax.set_xlabel("Pbi")
ax.set_ylabel("Pais")
ax.grid(axis="y", color="#CDD7DA", linestyle="--")
# ============================================
plt.show()

"""## Ejercicio de grillas:

Para este ejercicio, vamos a crear valores aleatorios, que serán contenidos en un DataFrame que llamaremos `df`:
"""

np.random.seed(0)
df = pd.DataFrame(data={'a':np.random.randint(0, 100, 50),
                        'b':np.random.randint(0, 100, 50),
                        'c':np.random.randint(0, 100, 50),
                        'd':np.random.randint(0, 100, 50)})
df.head()

"""**Ejercicio 1:**

Vamos a crear una grilla de 4 gráficos de línea, en la que los ejes x va a contener los valores del índice `df.index.values`, mientras que los ejes y, los valores de las columnas a, b, c y d.  

La figura debe tener:
- 2 filas y 2 columas
- Tamaño de figura de una altura de 8 y un ancho de 15.
- Nombre de los ejes y referencia en cada gráfico
- Grilla
- La siguiente posición de gráficos:
  - Los valores A en la parte superior izquierda, color `green`
  - Los valores B en la parte superior derecha, color `red`
  - Los valores C en la parte inferior izquierda, color `magenta`
  - Los valores D en la parte inferior derecha, color `blue`
"""

# =========== Código de alumno ===============
fig, ax = plt.subplots(nrows=2, ncols=2)
fig.subplots_adjust(wspace=0.5, hspace=0.5)

ax[0,0].plot(df.index.values, df['a'],color="green")
ax[0,1].plot(df.index.values, df['b'],color="red")
ax[1,0].plot(df.index.values, df['c'],color="magenta")
ax[1,1].plot(df.index.values, df['d'],color="blue")
ax[0,0].grid()
ax[0,1].grid()
ax[1,0].grid()
ax[1,1].grid()
ax[0,0].set_xlim(0, 15)
ax[0,0].set_ylim(0, 8)
ax[0,1].set_xlim(0, 15)
ax[0,1].set_ylim(0, 8)
ax[1,0].set_xlim(0, 15)
ax[1,0].set_ylim(0, 8)
ax[1,1].set_xlim(0, 15)
ax[1,1].set_ylim(0, 8)

ax[0, 0].set_title("A")
ax[0, 0].set_xlabel("A.1")
ax[0, 0].set_ylabel("A.2")
ax[0, 1].set_title("B")
ax[0, 1].set_xlabel("B.1")
ax[0, 1].set_ylabel("B.2")
ax[1, 0].set_title("C")
ax[1, 0].set_xlabel("C.1")
ax[1, 0].set_ylabel("C.2")
ax[1, 1].set_title("D")
ax[1, 1].set_xlabel("D.1")
ax[1, 1].set_ylabel("D.2")
plt.show()
# ============================================

"""**Ejercicio 2:**

Vamos a crear una grilla de 2 gráficos: uno de línea y otro de puntos, siendo los ejes x los valores del índice `df.index.values`, mientras que los ejes y, los valores de las columnas a, b, c y d.  

La figura debe tener:
- 2 filas y 1 columa
- Tamaño de figura de una altura de 8 y un ancho de 15.
- Título de cada gráfico
- Referencias
- Grilla
- La siguiente posición de gráficos:
  - Los valores A Y B en la parte superior, en un gráfico de línea, color `green` y `red`, tipo de línea sólida y discontinua respectivamente.
  - Los valores C Y D en la parte inferior, en un gráfico de puntos, color `magenta` y `blue`, marcador circular y triangulo invertido respectivamente.
"""

# =========== Código de alumno ===============
fig, ax = plt.subplots(nrows=2, ncols=1)
fig.subplots_adjust(wspace=0.5, hspace=0.5)

ax[0].plot(df.index.values, df['a'],label="A",color="green",linestyle="-")
ax[0].plot(df.index.values, df['b'],label="B",color="red",linestyle="--")
ax[1].scatter(df.index.values, df['c'],label="C",color="magenta",marker="o")
ax[1].scatter(df.index.values, df['d'],label="D",color="blue",marker="v")
ax[0].grid()
ax[1].grid()
ax[0].set_xlim(0, 15)
ax[0].set_ylim(0, 8)
ax[1].set_xlim(0, 15)
ax[1].set_ylim(0, 8)

ax[0].set_title("A & B")
ax[1].set_title("c & D")

ax[0].legend()
ax[1].legend()
plt.show()

# ============================================